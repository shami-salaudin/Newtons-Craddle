'use strict';

var accessorFn = require('accessor-fn');
var Kapsule = require('kapsule');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var accessorFn__default = /*#__PURE__*/_interopDefaultLegacy(accessorFn);
var Kapsule__default = /*#__PURE__*/_interopDefaultLegacy(Kapsule);

var constantForce = Kapsule__default['default']({
  props: {
    strength: {
      "default": 1
    },
    // accessor: number > 0
    direction: {
      "default": 90
    },
    // accessor: angle in degrees (0: right, 90: down (svg coords))
    zAngle: {
      "default": 0
    } // accessor: angle with the 2-dimensional xy plane in degrees (positive: close, negative: far (WebGL coords)). Values of -90/90 cancel motion in xy plane. Values above 90 inverse direction.

  },
  methods: {
    initialize: function initialize(state, nodes) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      // called by engine to pass node objects and numDimensions
      var nDim = args.find(function (arg) {
        return [1, 2, 3].includes(arg);
      }) || 2;
      state.nodes = nodes;
      state.nDim = nDim;
    }
  },
  init: function init(alpha, state) {
    // called at each tick
    var strength = accessorFn__default['default'](state.strength);
    var direction = accessorFn__default['default'](state.direction);
    var zAngle = accessorFn__default['default'](state.zAngle);
    state.nodes.forEach(function (node) {
      var _polar2Cart = polar2Cart(alpha * strength(node), zAngle(node)),
          xydv = _polar2Cart.x,
          zdv = _polar2Cart.y;

      var _polar2Cart2 = polar2Cart(xydv, direction(node)),
          xdv = _polar2Cart2.x,
          ydv = _polar2Cart2.y;

      node.vx += xdv;
      if (state.nDim > 1) node.vy += ydv;
      if (state.nDim > 2) node.vz += zdv;
    }); //

    function polar2Cart(d, a) {
      var rad = deg2rad(a);
      return {
        x: d * Math.cos(rad),
        y: d * Math.sin(rad)
      }; //

      function deg2rad(deg) {
        return deg * Math.PI / 180;
      }
    }
  }
});

module.exports = constantForce;
